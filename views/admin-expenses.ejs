<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expenses Dashboard | School Management System</title>
    <%- include('./partials/styles') %>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }
        
        .dashboard-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }
        
        .stat-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .stat-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card h3 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }
        
        .stat-card p {
            color: #7f8c8d;
            margin: 5px 0 0;
            font-size: 0.9rem;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 10px;
        }
        
        .chart-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .chart-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .table-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .table-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .status-badge {
            font-size: 0.85rem;
            font-weight: 600;
            padding: 5px 10px;
            border-radius: 30px;
        }
        
        .status-paid {
            background-color: rgba(46, 204, 113, 0.15);
            color: #27ae60;
        }
        
        .status-pending {
            background-color: rgba(241, 196, 15, 0.15);
            color: #f39c12;
        }
        
        .status-overdue {
            background-color: rgba(231, 76, 60, 0.15);
            color: #c0392b;
        }
        
        .expense-form {
            display: none;
        }
        
        .search-box {
            margin-bottom: 25px;
        }
        
        .actions-wrapper {
            display: flex;
            gap: 10px;
        }
        
        .action-icon {
            cursor: pointer;
            transition: color 0.3s ease;
        }
        
        .action-icon:hover {
            color: var(--primary-color);
        }
    </style>
</head>
<body>
    <%- include('./partials/sidebar', { activePage: 'expenses' }) %>
    
    <!-- Main Content -->
    <div class="content">
        <%- include('./partials/header', { pageTitle: 'Expenses Dashboard' }) %>
        
        <div class="dashboard-header">
            <h2 class="dashboard-title">Financial Overview</h2>
            <button class="btn btn-primary" id="add-expense-btn">
                <i class="fas fa-plus-circle me-2"></i> Add Expense
            </button>
        </div>
        
        <!-- Expense Form (initially hidden) -->
        <div class="card mb-4 expense-form" id="expense-form">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-edit me-2"></i> Add New Expense</span>
                    <button type="button" class="btn-close" id="close-form-btn"></button>
                </div>
            </div>
            <div class="card-body">
                <form id="add-expense-form">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="student" class="form-label">Student</label>
                            <select class="form-select" id="student" name="student" required>
                                <option value="">Select Student</option>
                                <!-- Student options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="amount" class="form-label">Amount ($)</label>
                            <input type="number" class="form-control" id="amount" name="amount" min="0" step="0.01" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="type" class="form-label">Type</label>
                            <select class="form-select" id="type" name="type" required>
                                <option value="">Select Type</option>
                                <option value="tuition">Tuition</option>
                                <option value="books">Books</option>
                                <option value="transportation">Transportation</option>
                                <option value="meal">Meal</option>
                                <option value="uniform">Uniform</option>
                                <option value="activity">Activity</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8 mb-3">
                            <label for="description" class="form-label">Description</label>
                            <input type="text" class="form-control" id="description" name="description">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status" required>
                                <option value="pending" selected>Pending</option>
                                <option value="paid">Paid</option>
                                <option value="overdue">Overdue</option>
                            </select>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary me-2" id="cancel-btn">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Expense</button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Stats Row -->
        <div class="stat-cards">
            <div class="stat-card">
                <h3>$<%= totalAmount ? totalAmount.toFixed(2) : 0 %></h3>
                <p>Total Expenses</p>
                <div class="performance-indicator <%= expenseGrowthRate >= 0 ? 'up' : 'down' %>">
                    <i class="fas fa-arrow-<%= expenseGrowthRate >= 0 ? 'up' : 'down' %>"></i> <%= Math.abs(expenseGrowthRate) %>% from last month
                </div>
            </div>
            <div class="stat-card">
                <h3 class="text-success">$<%= expensesByStatus.paid ? expensesByStatus.paid.toFixed(2) : 0 %></h3>
                <p>Paid (<%= paidPercentage %>%)</p>
            </div>
            <div class="stat-card">
                <h3 class="text-warning">$<%= expensesByStatus.pending ? expensesByStatus.pending.toFixed(2) : 0 %></h3>
                <p>Pending (<%= pendingPercentage %>%)</p>
            </div>
            <div class="stat-card">
                <h3 class="text-danger">$<%= expensesByStatus.overdue ? expensesByStatus.overdue.toFixed(2) : 0 %></h3>
                <p>Overdue (<%= overduePercentage %>%)</p>
            </div>
        </div>
        
        <div class="row">
            <!-- Expenses by Type Chart -->
            <div class="col-lg-6 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-pie me-2"></i>Expenses by Type</h3>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                All Time
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#">Current Month</a></li>
                                <li><a class="dropdown-item" href="#">Past Month</a></li>
                                <li><a class="dropdown-item" href="#">All Time</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="expensesByTypeChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Expenses by Status Chart -->
            <div class="col-lg-6 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-pie me-2"></i>Expenses by Status</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="expensesByStatusChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <!-- Monthly Expenses Trend -->
            <div class="col-lg-12 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-line me-2"></i>Monthly Expenses Trend</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="monthlyTrendChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Expenses Table -->
        <div class="table-card">
            <div class="table-header">
                <h3 class="table-title"><i class="fas fa-list me-2"></i>Expenses List</h3>
                <div class="search-box">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search by student or description..." id="search-expenses">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Description</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% expenses.forEach(expense => { 
                            let statusClass;
                            if (expense.status === 'paid') {
                                statusClass = 'status-paid';
                            } else if (expense.status === 'pending') {
                                statusClass = 'status-pending';
                            } else {
                                statusClass = 'status-overdue';
                            }
                            
                            const date = new Date(expense.date).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            });
                            
                            // Capitalize type
                            const type = expense.type.charAt(0).toUpperCase() + expense.type.slice(1);
                        %>
                        <tr>
                            <td><%= expense.student ? `${expense.student.firstName} ${expense.student.lastName}` : 'Unknown Student' %></td>
                            <td><%= expense.description %></td>
                            <td><%= type %></td>
                            <td>$<%= expense.amount.toFixed(2) %></td>
                            <td><span class="status-badge <%= statusClass %>"><%= expense.status.charAt(0).toUpperCase() + expense.status.slice(1) %></span></td>
                            <td><%= date %></td>
                            <td>
                                <div class="actions-wrapper">
                                    <% if (expense.status !== 'paid') { %>
                                    <i class="fas fa-check-circle action-icon text-success mark-paid" data-id="<%= expense._id %>" title="Mark as Paid"></i>
                                    <% } %>
                                    <i class="fas fa-edit action-icon text-primary edit-expense" data-id="<%= expense._id %>" title="Edit"></i>
                                    <i class="fas fa-trash-alt action-icon text-danger delete-expense" data-id="<%= expense._id %>" title="Delete"></i>
                                </div>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination Controls -->
            <% if (pagination && pagination.totalPages > 1) { %>
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div>
                    <span class="text-muted">Showing <%= (pagination.currentPage - 1) * pagination.limit + 1 %> to 
                    <%= Math.min(pagination.currentPage * pagination.limit, pagination.totalRecords) %> 
                    of <%= pagination.totalRecords %> records</span>
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        <!-- Previous Page -->
                        <% if (pagination.currentPage > 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.currentPage - 1 %>" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <% } else { %>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <% } %>
                        
                        <!-- Page Numbers -->
                        <% 
                        let startPage = Math.max(1, pagination.currentPage - 2);
                        let endPage = Math.min(pagination.totalPages, startPage + 4);
                        
                        // Adjust start page if we're near the end
                        if (endPage - startPage < 4) {
                            startPage = Math.max(1, endPage - 4);
                        }
                        
                        for (let i = startPage; i <= endPage; i++) { %>
                        <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                        <% } %>
                        
                        <!-- Next Page -->
                        <% if (pagination.currentPage < pagination.totalPages) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.currentPage + 1 %>" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <% } else { %>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
            <% } %>
        </div>
    </div>

    <%- include('./partials/scripts') %>
    
    <script>
        // Initialize charts only after DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Expenses by Type Chart
            const expensesByTypeCtx = document.getElementById('expensesByTypeChart').getContext('2d');
            
            const expensesByTypeChart = new Chart(expensesByTypeCtx, {
                type: 'doughnut',
                data: {
                    labels: <%- JSON.stringify(expenseTypeLabels) %>,
                    datasets: [{
                        data: <%- JSON.stringify(expenseTypeData) %>,
                        backgroundColor: [
                            'rgba(52, 152, 219, 0.8)',
                            'rgba(46, 204, 113, 0.8)',
                            'rgba(155, 89, 182, 0.8)',
                            'rgba(241, 196, 15, 0.8)',
                            'rgba(230, 126, 34, 0.8)',
                            'rgba(231, 76, 60, 0.8)',
                            'rgba(149, 165, 166, 0.8)'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = parseFloat(context.raw).toFixed(2);
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((context.raw / total) * 100);
                                    return `${label}: $${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '60%'
                }
            });
            
            // Expenses by Status Chart
            const expensesByStatusCtx = document.getElementById('expensesByStatusChart').getContext('2d');
            
            const expensesByStatusChart = new Chart(expensesByStatusCtx, {
                type: 'pie',
                data: {
                    labels: ['Paid', 'Pending', 'Overdue'],
                    datasets: [{
                        data: [
                            <%= expensesByStatus.paid || 0 %>,
                            <%= expensesByStatus.pending || 0 %>,
                            <%= expensesByStatus.overdue || 0 %>
                        ],
                        backgroundColor: [
                            'rgba(46, 204, 113, 0.8)',
                            'rgba(241, 196, 15, 0.8)',
                            'rgba(231, 76, 60, 0.8)'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = parseFloat(context.raw).toFixed(2);
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((context.raw / total) * 100);
                                    return `${label}: $${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Monthly Expenses Trend Chart
            const monthlyTrendCtx = document.getElementById('monthlyTrendChart').getContext('2d');
            
            const monthlyTrendChart = new Chart(monthlyTrendCtx, {
                type: 'bar',
                data: {
                    labels: <%- JSON.stringify(statusByMonth.months) %>,
                    datasets: [
                        {
                            label: 'Paid',
                            data: <%- JSON.stringify(statusByMonth.paid) %>,
                            backgroundColor: 'rgba(46, 204, 113, 0.8)',
                            borderWidth: 0
                        },
                        {
                            label: 'Pending',
                            data: <%- JSON.stringify(statusByMonth.pending) %>,
                            backgroundColor: 'rgba(241, 196, 15, 0.8)',
                            borderWidth: 0
                        },
                        {
                            label: 'Overdue',
                            data: <%- JSON.stringify(statusByMonth.overdue) %>,
                            backgroundColor: 'rgba(231, 76, 60, 0.8)',
                            borderWidth: 0
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            stacked: true
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value;
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = parseFloat(context.raw).toFixed(2);
                                    return `${context.dataset.label}: $${value}`;
                                }
                            }
                        }
                    }
                }
            });
        });
        
        // Form toggle
        document.getElementById('add-expense-btn').addEventListener('click', function() {
            document.getElementById('expense-form').style.display = 'block';
        });
        
        document.getElementById('close-form-btn').addEventListener('click', function() {
            document.getElementById('expense-form').style.display = 'none';
        });
        
        document.getElementById('cancel-btn').addEventListener('click', function() {
            document.getElementById('expense-form').style.display = 'none';
        });
        
        // Load students for dropdown
        fetch('/admin/students')
            .then(response => response.json())
            .then(data => {
                const studentSelect = document.getElementById('student');
                
                if (data.students) {
                    data.students.forEach(student => {
                        const option = document.createElement('option');
                        option.value = student._id;
                        option.textContent = `${student.firstName} ${student.lastName}`;
                        studentSelect.appendChild(option);
                    });
                } else if (data.data) {
                    data.data.forEach(student => {
                        const option = document.createElement('option');
                        option.value = student._id;
                        option.textContent = `${student.firstName} ${student.lastName}`;
                        studentSelect.appendChild(option);
                    });
                }
            })
            .catch(error => console.error('Error loading students:', error));
        
        // Form submission
        document.getElementById('add-expense-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                student: document.getElementById('student').value,
                amount: parseFloat(document.getElementById('amount').value),
                type: document.getElementById('type').value,
                description: document.getElementById('description').value || 'School Fee',
                status: document.getElementById('status').value
            };
            
            fetch('/admin/expenses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message === 'Expense created successfully') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Expense has been added successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'An error occurred while adding the expense'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while adding the expense'
                });
            });
        });
        
        // Search functionality
        document.getElementById('search-expenses').addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const student = row.cells[0].textContent.toLowerCase();
                const description = row.cells[1].textContent.toLowerCase();
                
                if (student.includes(searchTerm) || description.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
        
        // Mark expense as paid
        document.querySelectorAll('.mark-paid').forEach(button => {
            button.addEventListener('click', function() {
                const expenseId = this.getAttribute('data-id');
                
                Swal.fire({
                    title: 'Mark as Paid?',
                    text: "This will update the expense status to 'Paid'",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, mark as paid'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/admin/expenses/${expenseId}/mark-paid`, {
                            method: 'PUT'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.message === 'Expense marked as paid') {
                                Swal.fire(
                                    'Updated!',
                                    'The expense has been marked as paid.',
                                    'success'
                                ).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message || 'An error occurred while updating the expense',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'An error occurred while updating the expense',
                                'error'
                            );
                        });
                    }
                });
            });
        });
        
        // Delete expense
        document.querySelectorAll('.delete-expense').forEach(button => {
            button.addEventListener('click', function() {
                const expenseId = this.getAttribute('data-id');
                
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/admin/expenses/${expenseId}`, {
                            method: 'DELETE'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.message === 'Expense deleted successfully') {
                                Swal.fire(
                                    'Deleted!',
                                    'The expense has been deleted.',
                                    'success'
                                ).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message || 'An error occurred while deleting the expense',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'An error occurred while deleting the expense',
                                'error'
                            );
                        });
                    }
                });
            });
        });
    </script>
</body>
</html> 