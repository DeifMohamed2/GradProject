<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Admin Dashboard</title>
    <%- include('./partials/styles') %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --primary-dark: #1d4ed8;
            --secondary-color: #64748b;
            --success-color: #059669;
            --danger-color: #dc2626;
            --warning-color: #d97706;
            --info-color: #0891b2;
            --light-bg: #f8fafc;
            --card-bg: #ffffff;
            --border-color: #e2e8f0;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
            --radius-sm: 0.375rem;
            --radius-md: 0.5rem;
            --radius-lg: 0.75rem;
            --radius-xl: 1rem;
        }

        * {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-primary);
            line-height: 1.6;
        }

        /* Enhanced Class Header */
        .class-header {
            background: linear-gradient(135deg, var(--card-bg) 0%, #f1f5f9 100%);
            padding: 2rem;
            border-radius: var(--radius-xl);
            box-shadow: var(--shadow-lg);
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
            position: relative;
            overflow: hidden;
        }

        .class-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
        }

        .class-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            letter-spacing: -0.025em;
        }

        .class-description {
            color: var(--text-secondary);
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }

        /* Enhanced Content Cards */
        .content-card {
            background-color: var(--card-bg);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
            overflow: hidden;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .content-card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

        .card-header {
            padding: 1.5rem 2rem;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h5 {
            margin: 0;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 1.25rem;
            display: flex;
            align-items: center;
        }

        .card-header h5 i {
            color: var(--primary-color);
            margin-right: 0.5rem;
        }

        .card-body {
            padding: 2rem;
        }

        /* Enhanced Info Display */
        .info-item {
            margin-bottom: 1.5rem;
            padding: 1rem;
            background-color: #f8fafc;
            border-radius: var(--radius-md);
            border-left: 4px solid var(--primary-color);
        }

        .info-label {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: 0.25rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .info-value {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 1.1rem;
        }

        /* Enhanced Teacher Card */
        .teacher-card {
            display: flex;
            align-items: center;
            padding: 1.5rem;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .teacher-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .teacher-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1.5rem;
            border: 4px solid var(--card-bg);
            box-shadow: var(--shadow-md);
        }

        .teacher-info h6 {
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
            font-size: 1.2rem;
        }

        .teacher-info p {
            margin-bottom: 0;
            color: var(--text-secondary);
            font-size: 1rem;
        }

        /* Enhanced Student Grid */
        .student-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 1.5rem;
        }

        .student-card {
            background: linear-gradient(135deg, var(--card-bg) 0%, #f8fafc 100%);
            border-radius: var(--radius-lg);
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
            position: relative;
            overflow: hidden;
        }

        .student-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
        }

        .student-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-xl);
            border-color: var(--primary-color);
        }

        .student-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 1rem;
            border: 3px solid var(--card-bg);
            box-shadow: var(--shadow-md);
        }

        .student-name {
            font-weight: 700;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .student-email {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: 1rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .student-actions {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-action {
            width: 36px;
            height: 36px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--radius-md);
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }

        .btn-action:hover {
            transform: scale(1.1);
        }

        /* Enhanced Badges */
        .badge {
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: var(--radius-md);
            font-size: 0.875rem;
            letter-spacing: 0.025em;
        }

        .bg-success {
            background-color: var(--success-color) !important;
        }

        .bg-danger {
            background-color: var(--danger-color) !important;
        }

        /* Enhanced Buttons */
        .btn {
            font-weight: 600;
            border-radius: var(--radius-md);
            padding: 0.75rem 1.5rem;
            transition: all 0.2s ease;
            border: none;
            font-size: 0.875rem;
            letter-spacing: 0.025em;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-outline-primary {
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            background-color: transparent;
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        .btn-outline-secondary {
            border: 2px solid var(--secondary-color);
            color: var(--secondary-color);
            background-color: transparent;
        }

        .btn-outline-secondary:hover {
            background-color: var(--secondary-color);
            color: white;
        }

        /* Enhanced Pagination */
        .pagination-container {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: #f8fafc;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border-color);
        }

        .pagination .page-link {
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 0.75rem 1rem;
            margin: 0 0.125rem;
            border-radius: var(--radius-md);
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .pagination .page-link:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        .pagination .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            box-shadow: var(--shadow-md);
        }

        /* Enhanced Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-radius: var(--radius-lg);
            border: 2px dashed var(--border-color);
        }

        .empty-state i {
            font-size: 4rem;
            color: var(--text-muted);
            margin-bottom: 1.5rem;
            opacity: 0.6;
        }

        .empty-state h6 {
            color: var(--text-primary);
            margin-bottom: 1rem;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .empty-state p {
            color: var(--text-secondary);
            margin-bottom: 1.5rem;
            font-size: 1rem;
        }

        /* Enhanced Modals */
        .modal-content {
            border-radius: var(--radius-xl);
            border: none;
            box-shadow: var(--shadow-xl);
        }

        .modal-header {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 1px solid var(--border-color);
            border-radius: var(--radius-xl) var(--radius-xl) 0 0;
            padding: 1.5rem 2rem;
        }

        .modal-title {
            font-weight: 700;
            color: var(--text-primary);
            font-size: 1.25rem;
        }

        .modal-body {
            padding: 2rem;
        }

        .modal-footer {
            border-top: 1px solid var(--border-color);
            padding: 1.5rem 2rem;
            background-color: #f8fafc;
        }

        /* Enhanced Form Elements */
        .form-control, .form-select {
            border: 2px solid var(--border-color);
            border-radius: var(--radius-md);
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .form-label {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        /* Enhanced List Group */
        .list-group-item {
            border: 1px solid var(--border-color);
            padding: 1rem 1.5rem;
            transition: all 0.2s ease;
        }

        .list-group-item:hover {
            background-color: #f8fafc;
            border-color: var(--primary-color);
        }

        .list-group-item label {
            cursor: pointer;
            margin-bottom: 0;
            font-weight: 500;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .class-header {
                padding: 1.5rem;
            }

            .class-title {
                font-size: 1.5rem;
            }

            .card-body {
                padding: 1.5rem;
            }

            .student-grid {
                grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
                gap: 1rem;
            }

            .teacher-card {
                flex-direction: column;
                text-align: center;
            }

            .teacher-avatar {
                margin-right: 0;
                margin-bottom: 1rem;
            }
        }

        /* Loading States */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Animation Classes */
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-up {
            animation: slideUp 0.3s ease-out;
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
    </style>
</head>
<body>
    <%- include('./partials/sidebar', { activePage: 'classes' }) %>
    
    <!-- Main Content -->
    <div class="content">
        <%- include('./partials/header', { pageTitle: 'Class Details' }) %>
        
        <!-- Class Header -->
        <div class="class-header fade-in">
            <div class="d-flex justify-content-between align-items-start mb-3">
                <div>
                    <h1 class="class-title"><%= classData.name %></h1>
                    <p class="class-description"><%= classData.description || 'No description provided' %></p>
                </div>
                <a href="/admin/classes" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i> Back to Classes
                </a>
            </div>

            <!-- Status Badge -->
            <div class="d-flex align-items-center">
                <span class="badge <%= classData.isActive ? 'bg-success' : 'bg-danger' %> me-3">
                    <i class="bi bi-<%= classData.isActive ? 'check-circle' : 'x-circle' %> me-1"></i>
                    <%= classData.isActive ? 'Active' : 'Inactive' %>
                </span>
                <span class="text-muted">
                    <i class="bi bi-calendar3 me-1"></i>
                    Created on <%= new Date(classData.createdAt).toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    }) %>
                </span>
            </div>
        </div>
        
        <div class="row">
            <!-- Class Info Card -->
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="content-card h-100 slide-up">
                    <div class="card-header">
                        <h5><i class="bi bi-info-circle"></i>Class Information</h5>
                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#editClassModal">
                            <i class="bi bi-pencil me-1"></i> Edit
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="info-item">
                            <div class="info-label">Status</div>
                            <div class="info-value">
                                <span class="badge <%= classData.isActive ? 'bg-success' : 'bg-danger' %>">
                                    <i class="bi bi-<%= classData.isActive ? 'check-circle' : 'x-circle' %> me-1"></i>
                                    <%= classData.isActive ? 'Active' : 'Inactive' %>
                                </span>
                            </div>
                        </div>
                        
                        <div class="info-item">
                            <div class="info-label">Created Date</div>
                            <div class="info-value">
                                <i class="bi bi-calendar3 me-2 text-primary"></i>
                                <%= new Date(classData.createdAt).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </div>
                        </div>
                        
                        <div class="info-item">
                            <div class="info-label">Total Students</div>
                            <div class="info-value">
                                <i class="bi bi-people me-2 text-primary"></i>
                                <%= studentPagination.total %> Students
                            </div>
                        </div>
                        
                        <div class="info-item">
                            <div class="info-label">Last Updated</div>
                            <div class="info-value">
                                <i class="bi bi-clock me-2 text-primary"></i>
                                <%= new Date(classData.updatedAt).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Teacher Card -->
            <div class="col-md-6 col-lg-8 mb-4">
                <div class="content-card h-100 slide-up">
                    <div class="card-header">
                        <h5><i class="bi bi-person-badge"></i>Assigned Teacher</h5>
                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#changeTeacherModal">
                            <i class="bi bi-arrow-repeat me-1"></i> Change Teacher
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="teacher-card">
                            <img src="<%= classData.teacher.profilePicture || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(classData.teacher.firstName + ' ' + classData.teacher.lastName) + '&background=2563eb&color=fff&size=200' %>" 
                                 alt="<%= classData.teacher.firstName %>" 
                                 class="teacher-avatar">
                            <div class="teacher-info flex-grow-1">
                                <h6><%= classData.teacher.firstName %> <%= classData.teacher.lastName %></h6>
                                <p>
                                    <i class="bi bi-envelope me-2"></i>
                                    <a href="mailto:<%= classData.teacher.email %>" class="text-decoration-none text-primary">
                                        <%= classData.teacher.email %>
                                    </a>
                                </p>
                            </div>
                            <a href="/admin/teachers/<%= classData.teacher._id %>" class="btn btn-outline-primary">
                                <i class="bi bi-person me-1"></i>View Profile
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Students Section -->
        <div class="content-card slide-up">
            <div class="card-header">
                <h5>
                    <i class="bi bi-people-fill"></i>
                    Enrolled Students (<%= studentPagination.total %>)
                </h5>
                <div>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStudentsModal">
                        <i class="bi bi-plus-lg me-2"></i> Add Students
                    </button>
                </div>
            </div>
            <div class="card-body">
                <% if (classData.students && classData.students.length > 0) { %>
                    <div class="student-grid">
                        <% classData.students.forEach(student => { %>
                            <div class="student-card">
                                <img src="<%= student.profilePicture || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(student.firstName + ' ' + student.lastName) + '&background=2563eb&color=fff&size=200' %>" 
                                     alt="<%= student.firstName %>" 
                                     class="student-avatar">
                                <div class="student-name"><%= student.firstName %> <%= student.lastName %></div>
                                <div class="student-email" title="<%= student.email %>"><%= student.email %></div>
                                <div class="student-actions">
                                    <a href="/admin/students/<%= student._id %>" class="btn btn-sm btn-info btn-action" title="View Profile">
                                        <i class="bi bi-eye-fill"></i>
                                    </a>
                                    <button type="button" class="btn btn-sm btn-danger btn-action remove-student"
                                            data-student-id="<%= student._id %>"
                                            data-student-name="<%= student.firstName %> <%= student.lastName %>"
                                            title="Remove from Class">
                                        <i class="bi bi-person-dash-fill"></i>
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                
                    <!-- Pagination Controls -->
                    <% if (studentPagination && studentPagination.totalPages > 1) { %>
                    <div class="pagination-container">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0 fw-medium">
                                    Showing <%= (studentPagination.page - 1) * studentPagination.limit + 1 %> to 
                                    <%= Math.min(studentPagination.page * studentPagination.limit, studentPagination.total) %> 
                                    of <%= studentPagination.total %> students
                                </p>
                            </div>
                            <nav aria-label="Page navigation">
                                <ul class="pagination mb-0">
                                    <li class="page-item <%= studentPagination.hasPrevPage ? '' : 'disabled' %>">
                                        <a class="page-link" href="<%= studentPagination.hasPrevPage ? '/admin/classes/' + classData._id + '?' + new URLSearchParams({
                                            page: studentPagination.page - 1,
                                            limit: studentPagination.limit
                                        }).toString() : '#' %>" aria-label="Previous">
                                            <i class="bi bi-chevron-left"></i>
                                        </a>
                                    </li>
                                    
                                    <% for(let i = 1; i <= studentPagination.totalPages; i++) { %>
                                        <% if (
                                            i === 1 || 
                                            i === studentPagination.totalPages || 
                                            (i >= studentPagination.page - 1 && i <= studentPagination.page + 1)
                                        ) { %>
                                            <li class="page-item <%= i === studentPagination.page ? 'active' : '' %>">
                                                <a class="page-link" href="/admin/classes/<%= classData._id %>?<%= new URLSearchParams({
                                                    page: i,
                                                    limit: studentPagination.limit
                                                }).toString() %>">
                                                    <%= i %>
                                                </a>
                                            </li>
                                        <% } else if (
                                            i === studentPagination.page - 2 || 
                                            i === studentPagination.page + 2
                                        ) { %>
                                            <li class="page-item disabled">
                                                <a class="page-link" href="#">...</a>
                                            </li>
                                        <% } %>
                                    <% } %>
                                    
                                    <li class="page-item <%= studentPagination.hasNextPage ? '' : 'disabled' %>">
                                        <a class="page-link" href="<%= studentPagination.hasNextPage ? '/admin/classes/' + classData._id + '?' + new URLSearchParams({
                                            page: studentPagination.page + 1,
                                            limit: studentPagination.limit
                                        }).toString() : '#' %>" aria-label="Next">
                                            <i class="bi bi-chevron-right"></i>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                    <% } %>
                <% } else { %>
                    <div class="empty-state">
                        <i class="bi bi-people"></i>
                        <h6>No Students Enrolled</h6>
                        <p>This class doesn't have any students yet. Start by adding some students to get started.</p>
                        <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#addStudentsModal">
                            <i class="bi bi-plus-lg me-2"></i> Add Your First Students
                        </button>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <!-- Edit Class Modal -->
    <div class="modal fade" id="editClassModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-pencil-square me-2"></i>Edit Class Information
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editClassForm">
                        <div class="mb-4">
                            <label for="className" class="form-label">
                                <i class="bi bi-bookmark me-1"></i>Class Name <span class="text-danger">*</span>
                            </label>
                            <input type="text" class="form-control" id="className" name="name" value="<%= classData.name %>" required>
                        </div>
                        <div class="mb-4">
                            <label for="classDescription" class="form-label">
                                <i class="bi bi-file-text me-1"></i>Description
                            </label>
                            <textarea class="form-control" id="classDescription" name="description" rows="4" placeholder="Enter a detailed description of the class..."><%= classData.description || '' %></textarea>
                            <small class="text-muted">Provide a brief description of the class content, objectives, or any important information.</small>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isActive" name="isActive" <%= classData.isActive ? 'checked' : '' %>>
                            <label class="form-check-label fw-medium" for="isActive">
                                <i class="bi bi-toggle-on me-1"></i>Active Status
                            </label>
                            <small class="form-text text-muted d-block mt-1">Inactive classes won't appear in teacher and student dashboards and won't be available for enrollment.</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-lg me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="saveClassEdits">
                        <i class="bi bi-check-lg me-1"></i>Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Change Teacher Modal -->
    <div class="modal fade" id="changeTeacherModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-arrow-repeat me-2"></i>Change Teacher Assignment
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Current Teacher:</strong> <%= classData.teacher.firstName %> <%= classData.teacher.lastName %>
                    </div>
                    <form id="changeTeacherForm">
                        <div class="mb-3">
                            <label for="newTeacher" class="form-label">
                                <i class="bi bi-person-badge me-1"></i>Select New Teacher <span class="text-danger">*</span>
                            </label>
                            <select class="form-select" id="newTeacher" name="teacherId" required>
                                <option value="">Choose a teacher...</option>
                                <% teachers.forEach(teacher => { %>
                                    <option value="<%= teacher._id %>" 
                                            <%= (classData.teacher._id.toString() === teacher._id.toString()) ? 'selected' : '' %>>
                                        <%= teacher.firstName %> <%= teacher.lastName %> - <%= teacher.email %>
                                    </option>
                                <% }); %>
                            </select>
                            <small class="text-muted">The selected teacher will be assigned to this class and will have access to manage it.</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-lg me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="saveTeacherChange">
                        <i class="bi bi-check-lg me-1"></i>Update Teacher
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Students Modal -->
    <div class="modal fade" id="addStudentsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-person-plus me-2"></i>Add Students to Class
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addStudentsForm">
                        <div class="mb-4">
                            <label class="form-label fw-medium">
                                <i class="bi bi-search me-1"></i>Search & Select Students <span class="text-danger">*</span>
                            </label>
                            <div class="input-group mb-3">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" id="studentSearch" 
                                       placeholder="Type student name or email to search...">
                                <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                            
                            <div class="card">
                                <div class="card-header bg-light">
                                    <small class="text-muted fw-medium">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Available Students (not currently in this class)
                                    </small>
                                </div>
                                <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                                    <% if (availableStudents && availableStudents.length > 0) { %>
                                        <div class="list-group list-group-flush" id="studentsList">
                                            <% availableStudents.forEach(student => { %>
                                                <label class="list-group-item list-group-item-action d-flex align-items-center py-3">
                                                    <input class="form-check-input me-3" type="checkbox" 
                                                           name="selectedStudents" value="<%= student._id %>">
                                                    <img src="<%= student.profilePicture || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(student.firstName + ' ' + student.lastName) + '&background=2563eb&color=fff&size=100' %>" 
                                                         alt="<%= student.firstName %>" 
                                                         class="rounded-circle me-3" 
                                                         style="width: 40px; height: 40px; object-fit: cover;">
                                                    <div>
                                                        <div class="fw-medium"><%= student.firstName %> <%= student.lastName %></div>
                                                        <small class="text-muted"><%= student.email %></small>
                                                    </div>
                                                </label>
                                            <% }); %>
                                        </div>
                                    <% } else { %>
                                        <div class="p-4 text-center text-muted">
                                            <i class="bi bi-info-circle fs-2 mb-3 d-block"></i>
                                            <h6>No Available Students</h6>
                                            <p class="mb-0">All students are already enrolled in this class or no students exist in the system.</p>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                            <small class="text-muted mt-2 d-block">
                                <i class="bi bi-lightbulb me-1"></i>
                                Tip: You can select multiple students at once by checking multiple boxes.
                            </small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-lg me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="addSelectedStudents">
                        <i class="bi bi-person-plus me-1"></i>Add Selected Students
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Remove Student Confirmation Modal -->
    <div class="modal fade" id="removeStudentModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>Remove Student
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Confirmation Required</strong>
                    </div>
                    <p class="mb-3">Are you sure you want to remove <span id="studentNameToRemove" class="fw-bold text-primary"></span> from this class?</p>
                    <div class="bg-light p-3 rounded">
                        <small class="text-muted">
                            <i class="bi bi-info-circle me-1"></i>
                            <strong>Note:</strong> This action will only remove the student from this specific class. The student's account and enrollment in other classes will remain unchanged.
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-lg me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmRemoveStudent">
                        <i class="bi bi-person-dash me-1"></i>Remove Student
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <%- include('./partials/scripts') %>
    <script>
        $(document).ready(function() {
            // Variables to store IDs for actions
            let studentToRemoveId = null;
            
            // Add loading state helper
            function showLoading(title = 'Processing...') {
                Swal.fire({
                    title: title,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
            }
            
            // Edit Class Form Submission
            $('#saveClassEdits').on('click', function() {
                const name = $('#className').val().trim();
                const description = $('#classDescription').val().trim();
                const isActive = $('#isActive').prop('checked');
                
                if (!name) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Missing Required Fields',
                        text: 'Please provide a class name',
                        confirmButtonColor: '#2563eb'
                    });
                    return;
                }
                
                showLoading('Saving changes...');
                
                fetch('/admin/classes/<%= classData._id %>', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        description,
                        isActive
                    })
                })
                .then(response => response.json())
                .then(data => {
                    $('#editClassModal').modal('hide');
                    
                    if (data.message === 'Class updated successfully') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Changes Saved Successfully!',
                            text: 'Class information has been updated',
                            confirmButtonColor: '#2563eb',
                            timer: 2000,
                            timerProgressBar: true
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Update Failed',
                            text: data.message || 'Failed to update class information',
                            confirmButtonColor: '#2563eb'
                        });
                    }
                })
                .catch(error => {
                    $('#editClassModal').modal('hide');
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Connection Error',
                        text: 'Unable to connect to the server. Please try again.',
                        confirmButtonColor: '#2563eb'
                    });
                });
            });
            
            // Change Teacher Form Submission
            $('#saveTeacherChange').on('click', function() {
                const teacherId = $('#newTeacher').val();
                
                if (!teacherId) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Teacher Selection Required',
                        text: 'Please select a teacher from the dropdown',
                        confirmButtonColor: '#2563eb'
                    });
                    return;
                }

                showLoading('Updating teacher assignment...');
                
                fetch('/admin/classes/<%= classData._id %>', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        teacherId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    $('#changeTeacherModal').modal('hide');
                    
                    if (data.message === 'Class updated successfully') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Teacher Updated Successfully!',
                            text: 'The new teacher has been assigned to this class',
                            confirmButtonColor: '#2563eb',
                            timer: 2000,
                            timerProgressBar: true
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Update Failed',
                            text: data.message || 'Failed to update teacher assignment',
                            confirmButtonColor: '#2563eb'
                        });
                    }
                })
                .catch(error => {
                    $('#changeTeacherModal').modal('hide');
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Connection Error',
                        text: 'Unable to connect to the server. Please try again.',
                        confirmButtonColor: '#2563eb'
                    });
                });
            });
            
            // Student search in Add Students Modal
            $('#studentSearch').on('input', function() {
                const searchTerm = $(this).val().toLowerCase();
                
                $('#studentsList label').each(function() {
                    const studentText = $(this).text().toLowerCase();
                    if (studentText.includes(searchTerm)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });

            // Clear search
            $('#clearSearch').on('click', function() {
                $('#studentSearch').val('');
                $('#studentsList label').show();
            });
            
            // Add Students Form Submission
            $('#addSelectedStudents').on('click', function() {
                const selectedStudents = $('input[name="selectedStudents"]:checked').map(function() {
                    return $(this).val();
                }).get();

                if (selectedStudents.length === 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'No Students Selected',
                        text: 'Please select at least one student to add to the class',
                        confirmButtonColor: '#2563eb'
                    });
                    return;
                }

                showLoading(`Adding ${selectedStudents.length} student(s)...`);
                
                fetch('/admin/classes/<%= classData._id %>/students', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        studentIds: selectedStudents
                    })
                })
                .then(response => response.json())
                .then(data => {
                    $('#addStudentsModal').modal('hide');
                    
                    if (data.message === 'Students assigned to class successfully') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Students Added Successfully!',
                            text: `${selectedStudents.length} student(s) have been enrolled in this class`,
                            confirmButtonColor: '#2563eb',
                            timer: 2000,
                            timerProgressBar: true
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Enrollment Failed',
                            text: data.message || 'Failed to add students to the class',
                            confirmButtonColor: '#2563eb'
                        });
                    }
                })
                .catch(error => {
                    $('#addStudentsModal').modal('hide');
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Connection Error',
                        text: 'Unable to connect to the server. Please try again.',
                        confirmButtonColor: '#2563eb'
                    });
                });
            });

            // Handle remove student button click
            $('.remove-student').on('click', function() {
                studentToRemoveId = $(this).data('student-id');
                const studentName = $(this).data('student-name');
                $('#studentNameToRemove').text(studentName);
                $('#removeStudentModal').modal('show');
            });

            // Remove student from class
            $('#confirmRemoveStudent').on('click', function() {
                if (!studentToRemoveId) return;

                showLoading('Removing student from class...');
                
                fetch(`/admin/classes/<%= classData._id %>/students/${studentToRemoveId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    $('#removeStudentModal').modal('hide');
                    
                    if (data.message === 'Student removed from class successfully') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Student Removed Successfully!',
                            text: 'The student has been removed from this class',
                            confirmButtonColor: '#2563eb',
                            timer: 2000,
                            timerProgressBar: true
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Removal Failed',
                            text: data.message || 'Failed to remove student from class',
                            confirmButtonColor: '#2563eb'
                        });
                    }
                })
                .catch(error => {
                    $('#removeStudentModal').modal('hide');
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Connection Error',
                        text: 'Unable to connect to the server. Please try again.',
                        confirmButtonColor: '#2563eb'
                    });
                });
            });

            // Add smooth animations to cards
            $('.content-card').each(function(index) {
                $(this).css('animation-delay', (index * 0.1) + 's');
            });

            // Enhanced form validation
            $('form input, form textarea, form select').on('blur', function() {
                if ($(this).prop('required') && !$(this).val()) {
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid').addClass('is-valid');
                }
            });

            // Reset form validation on modal close
            $('.modal').on('hidden.bs.modal', function() {
                $(this).find('form')[0]?.reset();
                $(this).find('.is-valid, .is-invalid').removeClass('is-valid is-invalid');
            });
        });
    </script>
</body>
</html>