<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grades Dashboard | School Management System</title>
    <%- include('./partials/styles') %>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }
        
        .dashboard-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }
        
        .stat-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .stat-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card h3 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            color: var(--primary-color);
        }
        
        .stat-card p {
            color: #7f8c8d;
            margin: 5px 0 0;
            font-size: 0.9rem;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 10px;
        }
        
        .chart-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .chart-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .table-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .table-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .grade-badge {
            font-size: 0.85rem;
            font-weight: 600;
            padding: 5px 10px;
            border-radius: 30px;
        }
        
        .grade-a {
            background-color: rgba(46, 204, 113, 0.15);
            color: #27ae60;
        }
        
        .grade-b {
            background-color: rgba(52, 152, 219, 0.15);
            color: #2980b9;
        }
        
        .grade-c {
            background-color: rgba(241, 196, 15, 0.15);
            color: #f39c12;
        }
        
        .grade-d {
            background-color: rgba(230, 126, 34, 0.15);
            color: #d35400;
        }
        
        .grade-f {
            background-color: rgba(231, 76, 60, 0.15);
            color: #c0392b;
        }
        
        .performance-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .performance-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .performance-item:last-child {
            border-bottom: none;
        }
        
        .performance-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .search-box {
            margin-bottom: 25px;
        }
        
        .actions-wrapper {
            display: flex;
            gap: 10px;
        }
        
        .action-icon {
            cursor: pointer;
            transition: color 0.3s ease;
        }
        
        .action-icon:hover {
            color: var(--primary-color);
        }
        
        .grade-form {
            display: none;
        }
    </style>
</head>
<body>
    <%- include('./partials/sidebar', { activePage: 'grades' }) %>
    
    <!-- Main Content -->
    <div class="content">
        <%- include('./partials/header', { pageTitle: 'Grades Dashboard' }) %>
        
        <div class="dashboard-header">
            <h2 class="dashboard-title">Academic Performance Overview</h2>
            <button class="btn btn-primary" id="add-grade-btn">
                <i class="fas fa-plus-circle me-2"></i> Add Grade
            </button>
        </div>
        
        <!-- Grade Form (initially hidden) -->
        <div class="card mb-4 grade-form" id="grade-form">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-edit me-2"></i> Add New Grade</span>
                    <button type="button" class="btn-close" id="close-form-btn"></button>
                </div>
            </div>
            <div class="card-body">
                <form id="add-grade-form">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="student" class="form-label">Student</label>
                            <select class="form-select" id="student" name="student" required>
                                <option value="">Select Student</option>
                                <!-- Student options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="subject" class="form-label">Subject</label>
                            <select class="form-select" id="subject" name="subject" required>
                                <option value="">Select Subject</option>
                                <option value="Mathematics">Mathematics</option>
                                <option value="Science">Science</option>
                                <option value="English">English</option>
                                <option value="History">History</option>
                                <option value="Geography">Geography</option>
                                <option value="Art">Art</option>
                                <option value="Physical Education">Physical Education</option>
                                <option value="Computer Science">Computer Science</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="grade" class="form-label">Grade (0-100)</label>
                            <input type="number" class="form-control" id="grade" name="grade" min="0" max="100" required>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary me-2" id="cancel-btn">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Grade</button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Stats Row -->
        <div class="stat-cards">
            <div class="stat-card">
                <h3><%= grades.length %></h3>
                <p>Total Grade Entries</p>
            </div>
            <div class="stat-card">
                <h3><%= averageGrade ? averageGrade.toFixed(1) : 0 %></h3>
                <p>Average Grade</p>
            </div>
            <div class="stat-card">
                <h3><%= Object.keys(gradesBySubject).length %></h3>
                <p>Subjects</p>
            </div>
            <div class="stat-card">
                <h3><%= performanceGroups.excellent %></h3>
                <p>Excellent Grades (90-100)</p>
            </div>
        </div>
        
        <div class="row">
            <!-- Performance Distribution Chart -->
            <div class="col-lg-8 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-pie me-2"></i>Performance Distribution</h3>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                All Periods
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#">Current Term</a></li>
                                <li><a class="dropdown-item" href="#">Last Term</a></li>
                                <li><a class="dropdown-item" href="#">All Periods</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="performanceChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Performance by Subject -->
            <div class="col-lg-4 mb-4">
                <div class="performance-card">
                    <h3 class="chart-title mb-3"><i class="fas fa-chart-bar me-2"></i>Performance by Subject</h3>
                    <div style="height: 300px; overflow-y: auto;">
                        <% if (subjectsData.sortedSubjects.length > 0) { %>
                            <% subjectsData.sortedSubjects.forEach(({subject, average}) => { 
                                let color, width;
                                if (average >= 90) {
                                    color = 'success';
                                    width = average;
                                } else if (average >= 80) {
                                    color = 'primary';
                                    width = average;
                                } else if (average >= 70) {
                                    color = 'info';
                                    width = average;
                                } else if (average >= 60) {
                                    color = 'warning';
                                    width = average;
                                } else {
                                    color = 'danger';
                                    width = average;
                                }
                            %>
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span><%= subject %></span>
                                    <span><%= average.toFixed(1) %></span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar bg-<%= color %>" role="progressbar" style="width: <%= width %>%"></div>
                                </div>
                            </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center py-4">
                                <i class="fas fa-info-circle me-2"></i> No subjects data found.
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <!-- Subject Comparison Chart -->
            <div class="col-lg-6 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-line me-2"></i>Subject Comparison</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="subjectComparisonChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Performance Trends Chart -->
            <div class="col-lg-6 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-line me-2"></i>Performance Trends</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="trendsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Grades Table -->
        <div class="table-card">
            <div class="table-header">
                <h3 class="table-title"><i class="fas fa-list me-2"></i>Grades List</h3>
                <div class="search-box">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search by student or subject..." id="search-grades">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Grade/Section</th>
                            <th>Subject</th>
                            <th>Grade</th>
                            <th>Performance</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% grades.forEach(grade => { 
                            let gradeClass, performance;
                            if (grade.grade >= 90) {
                                gradeClass = 'grade-a';
                                performance = 'Excellent';
                            } else if (grade.grade >= 80) {
                                gradeClass = 'grade-b';
                                performance = 'Good';
                            } else if (grade.grade >= 70) {
                                gradeClass = 'grade-c';
                                performance = 'Average';
                            } else if (grade.grade >= 60) {
                                gradeClass = 'grade-d';
                                performance = 'Below Average';
                            } else {
                                gradeClass = 'grade-f';
                                performance = 'Poor';
                            }
                            
                            const date = new Date(grade.createdAt).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            });
                        %>
                        <tr>
                            <td><%= grade.student ? `${grade.student.firstName} ${grade.student.lastName}` : 'Unknown Student' %></td>
                            <td><%= grade.student ? `Grade ${grade.student.grade}${grade.student.section ? '/' + grade.student.section : ''}` : 'N/A' %></td>
                            <td><%= grade.subject %></td>
                            <td><span class="grade-badge <%= gradeClass %>"><%= grade.grade %></span></td>
                            <td><%= performance %></td>
                            <td><%= date %></td>
                            <td>
                                <div class="actions-wrapper">
                                    <i class="fas fa-edit action-icon text-primary edit-grade" data-id="<%= grade._id %>"></i>
                                    <i class="fas fa-trash-alt action-icon text-danger delete-grade" data-id="<%= grade._id %>"></i>
                                </div>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <%- include('./partials/scripts') %>
    
    <script>
        // Performance Distribution Chart
        const performanceCtx = document.getElementById('performanceChart').getContext('2d');
        const performanceChart = new Chart(performanceCtx, {
            type: 'doughnut',
            data: {
                labels: ['Excellent (90-100)', 'Good (80-89)', 'Average (70-79)', 'Below Average (60-69)', 'Poor (Below 60)'],
                datasets: [{
                    data: [
                        <%= performanceGroups.excellent %>,
                        <%= performanceGroups.good %>,
                        <%= performanceGroups.average %>,
                        <%= performanceGroups.belowAverage %>,
                        <%= performanceGroups.poor %>
                    ],
                    backgroundColor: [
                        'rgba(46, 204, 113, 0.8)',
                        'rgba(52, 152, 219, 0.8)',
                        'rgba(241, 196, 15, 0.8)',
                        'rgba(230, 126, 34, 0.8)',
                        'rgba(231, 76, 60, 0.8)'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            padding: 20,
                            font: {
                                size: 12
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw;
                                const percent = context.parsed;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: ${value} students (${percentage}%)`;
                            }
                        }
                    }
                },
                cutout: '60%'
            }
        });
        
        // Subject Comparison Chart
        const subjectComparisonCtx = document.getElementById('subjectComparisonChart').getContext('2d');
        
        const subjectComparisonChart = new Chart(subjectComparisonCtx, {
            type: 'bar',
            data: {
                labels: <%= JSON.stringify(subjectsData.labels) %>,
                datasets: [{
                    label: 'Average Grade',
                    data: <%= JSON.stringify(subjectsData.averages) %>,
                    backgroundColor: 'rgba(52, 152, 219, 0.8)',
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
        
        // Performance Trends Chart
        const trendsCtx = document.getElementById('trendsChart').getContext('2d');
        
        // Prepare colors for each subject
        const trendColors = [
            { border: 'rgb(46, 204, 113)', background: 'rgba(46, 204, 113, 0.1)' },
            { border: 'rgb(52, 152, 219)', background: 'rgba(52, 152, 219, 0.1)' },
            { border: 'rgb(155, 89, 182)', background: 'rgba(155, 89, 182, 0.1)' }
        ];
        
        // Prepare datasets
        const trendDatasets = <%= JSON.stringify(trendsData.datasets) %>.map((dataset, index) => {
            const colorSet = trendColors[index % trendColors.length];
            return {
                label: dataset.subject,
                data: dataset.data,
                borderColor: colorSet.border,
                backgroundColor: colorSet.background,
                tension: 0.3,
                fill: true
            };
        });
        
        const trendsChart = new Chart(trendsCtx, {
            type: 'line',
            data: {
                labels: <%= JSON.stringify(trendsData.labels) %>,
                datasets: trendDatasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.dataset.label || '';
                                const value = context.raw !== null ? context.raw.toFixed(1) : 'No data';
                                return `${label}: ${value}`;
                            }
                        }
                    }
                }
            }
        });
        
        // Search functionality
        document.getElementById('search-grades').addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const student = row.cells[0].textContent.toLowerCase();
                const subject = row.cells[1].textContent.toLowerCase();
                
                if (student.includes(searchTerm) || subject.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
        
        // Form toggle
        document.getElementById('add-grade-btn').addEventListener('click', function() {
            document.getElementById('grade-form').style.display = 'block';
        });
        
        document.getElementById('close-form-btn').addEventListener('click', function() {
            document.getElementById('grade-form').style.display = 'none';
        });
        
        document.getElementById('cancel-btn').addEventListener('click', function() {
            document.getElementById('grade-form').style.display = 'none';
        });
        
        // Load students for dropdown
        fetch('/admin/students')
            .then(response => response.json())
            .then(data => {
                const studentSelect = document.getElementById('student');
                
                data.students.forEach(student => {
                    const option = document.createElement('option');
                    option.value = student._id;
                    option.textContent = `${student.firstName} ${student.lastName}`;
                    studentSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error loading students:', error));
        
        // Form submission
        document.getElementById('add-grade-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                student: document.getElementById('student').value,
                subject: document.getElementById('subject').value,
                grade: document.getElementById('grade').value
            };
            
            fetch('/admin/grades', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message === 'Grade created successfully') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Grade has been added successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'An error occurred while adding the grade'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while adding the grade'
                });
            });
        });
        
        // Delete grade
        document.querySelectorAll('.delete-grade').forEach(button => {
            button.addEventListener('click', function() {
                const gradeId = this.getAttribute('data-id');
                
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/admin/grades/${gradeId}`, {
                            method: 'DELETE'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.message === 'Grade deleted successfully') {
                                Swal.fire(
                                    'Deleted!',
                                    'The grade has been deleted.',
                                    'success'
                                ).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message || 'An error occurred while deleting the grade',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'An error occurred while deleting the grade',
                                'error'
                            );
                        });
                    }
                });
            });
        });
    </script>
</body>
</html> 