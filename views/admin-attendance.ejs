<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attendance Dashboard | School Management System</title>
    <%- include('./partials/styles') %>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Flatpickr for date picking -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <style>
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }
        
        .dashboard-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }
        
        .stat-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .stat-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card h3 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }
        
        .stat-card p {
            color: #7f8c8d;
            margin: 5px 0 0;
            font-size: 0.9rem;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 10px;
        }
        
        .chart-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .chart-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .table-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .table-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .status-badge {
            font-size: 0.85rem;
            font-weight: 600;
            padding: 5px 10px;
            border-radius: 30px;
        }
        
        .status-present {
            background-color: rgba(46, 204, 113, 0.15);
            color: #27ae60;
        }
        
        .status-late {
            background-color: rgba(241, 196, 15, 0.15);
            color: #f39c12;
        }
        
        .status-absent {
            background-color: rgba(231, 76, 60, 0.15);
            color: #c0392b;
        }
        
        .calendar-container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
        }
        
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .calendar-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            color: var(--secondary-color);
        }
        
        .calendar-days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        
        .calendar-day-header {
            text-align: center;
            font-weight: 600;
            font-size: 0.9rem;
            padding: 10px;
        }
        
        .calendar-day {
            text-align: center;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            position: relative;
        }
        
        .calendar-day .day-number {
            font-size: 1.1rem;
            font-weight: 500;
        }
        
        .calendar-day .day-stats {
            font-size: 0.7rem;
            margin-top: 5px;
        }
        
        .calendar-day:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }
        
        .calendar-day.present {
            background-color: rgba(46, 204, 113, 0.15);
        }
        
        .calendar-day.partial {
            background-color: rgba(241, 196, 15, 0.15);
        }
        
        .calendar-day.absent {
            background-color: rgba(231, 76, 60, 0.15);
        }
        
        .attendance-form {
            display: none;
        }
        
        .search-box {
            margin-bottom: 25px;
        }
        
        .actions-wrapper {
            display: flex;
            gap: 10px;
        }
        
        .action-icon {
            cursor: pointer;
            transition: color 0.3s ease;
        }
        
        .action-icon:hover {
            color: var(--primary-color);
        }
    </style>
</head>
<body>
    <%- include('./partials/sidebar', { activePage: 'attendance' }) %>
    
    <!-- Main Content -->
    <div class="content">
        <%- include('./partials/header', { pageTitle: 'Attendance Dashboard' }) %>
        
        <div class="dashboard-header">
            <h2 class="dashboard-title">Attendance Overview</h2>
            <button class="btn btn-primary" id="add-attendance-btn">
                <i class="fas fa-plus-circle me-2"></i> Record Attendance
            </button>
        </div>
        
        <!-- Attendance Form (initially hidden) -->
        <div class="card mb-4 attendance-form" id="attendance-form">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-edit me-2"></i> Record Attendance</span>
                    <button type="button" class="btn-close" id="close-form-btn"></button>
                </div>
            </div>
            <div class="card-body">
                <form id="add-attendance-form">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="student" class="form-label">Student</label>
                            <select class="form-select" id="student" name="student" required>
                                <option value="">Select Student</option>
                                <!-- Student options will be loaded dynamically -->
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="date" class="form-label">Date</label>
                            <input type="text" class="form-control" id="date" name="date" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status" required>
                                <option value="">Select Status</option>
                                <option value="present">Present</option>
                                <option value="late">Late</option>
                                <option value="absent">Absent</option>
                            </select>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary me-2" id="cancel-btn">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Record</button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Stats Row -->
        <div class="stat-cards">
            <div class="stat-card">
                <h3 class="text-success"><%= attendancePercentages.present.toFixed(1) %>%</h3>
                <p>Present Rate</p>
            </div>
            <div class="stat-card">
                <h3 class="text-warning"><%= attendancePercentages.late.toFixed(1) %>%</h3>
                <p>Late Rate</p>
            </div>
            <div class="stat-card">
                <h3 class="text-danger"><%= attendancePercentages.absent.toFixed(1) %>%</h3>
                <p>Absent Rate</p>
            </div>
            <div class="stat-card">
                <h3><%= attendance.length %></h3>
                <p>Total Records</p>
            </div>
        </div>
        
        <div class="row">
            <!-- Attendance Overview Chart -->
            <div class="col-lg-6 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-pie me-2"></i>Attendance Overview</h3>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                All Time
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#">Current Month</a></li>
                                <li><a class="dropdown-item" href="#">Past Month</a></li>
                                <li><a class="dropdown-item" href="#">All Time</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="attendanceOverviewChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Weekly Attendance Trends -->
            <div class="col-lg-6 mb-4">
                <div class="chart-card">
                    <div class="chart-header">
                        <h3 class="chart-title"><i class="fas fa-chart-line me-2"></i>Weekly Attendance Trends</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="weeklyTrendsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <!-- Attendance Calendar -->
            <div class="col-lg-12 mb-4">
                <div class="calendar-container">
                    <div class="calendar-header">
                        <h3 class="calendar-title"><i class="fas fa-calendar-alt me-2"></i>Attendance Calendar</h3>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-secondary" id="prev-month">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" id="current-month-display"><%= currentMonth %></button>
                            <button class="btn btn-sm btn-outline-secondary" id="next-month">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="calendar-days" id="calendar-headers">
                        <div class="calendar-day-header">Sun</div>
                        <div class="calendar-day-header">Mon</div>
                        <div class="calendar-day-header">Tue</div>
                        <div class="calendar-day-header">Wed</div>
                        <div class="calendar-day-header">Thu</div>
                        <div class="calendar-day-header">Fri</div>
                        <div class="calendar-day-header">Sat</div>
                    </div>
                    <div class="calendar-days" id="calendar-days">
                        <!-- Calendar will be generated by JavaScript with real data -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Attendance Records Table -->
        <div class="table-card">
            <div class="table-header">
                <h3 class="table-title"><i class="fas fa-list me-2"></i>Attendance Records</h3>
                <div class="search-box">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search by student or date..." id="search-attendance">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Grade/Section</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Recorded At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% attendance.forEach(record => { 
                            let statusClass;
                            if (record.status === 'present') {
                                statusClass = 'status-present';
                            } else if (record.status === 'late') {
                                statusClass = 'status-late';
                            } else {
                                statusClass = 'status-absent';
                            }
                            
                            const date = new Date(record.date).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            });
                            
                            const recordedAt = new Date(record.createdAt).toLocaleString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                        %>
                        <tr>
                            <td><%= record.student ? `${record.student.firstName} ${record.student.lastName}` : 'Unknown Student' %></td>
                            <td><%= record.student ? `Grade ${record.student.grade}${record.student.section ? '/' + record.student.section : ''}` : 'N/A' %></td>
                            <td><%= date %></td>
                            <td><span class="status-badge <%= statusClass %>"><%= record.status.charAt(0).toUpperCase() + record.status.slice(1) %></span></td>
                            <td><%= recordedAt %></td>
                            <td>
                                <div class="actions-wrapper">
                                    <i class="fas fa-edit action-icon text-primary edit-attendance" data-id="<%= record._id %>"></i>
                                    <i class="fas fa-trash-alt action-icon text-danger delete-attendance" data-id="<%= record._id %>"></i>
                                </div>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>

            <!-- Pagination Controls -->
            <% if (pagination && pagination.totalPages > 1) { %>
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div>
                    <span class="text-muted">Showing <%= (pagination.currentPage - 1) * pagination.limit + 1 %> to 
                    <%= Math.min(pagination.currentPage * pagination.limit, pagination.totalRecords) %> 
                    of <%= pagination.totalRecords %> records</span>
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        <!-- Previous Page -->
                        <% if (pagination.currentPage > 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.currentPage - 1 %>" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <% } else { %>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <% } %>
                        
                        <!-- Page Numbers -->
                        <% 
                        let startPage = Math.max(1, pagination.currentPage - 2);
                        let endPage = Math.min(pagination.totalPages, startPage + 4);
                        
                        // Adjust start page if we're near the end
                        if (endPage - startPage < 4) {
                            startPage = Math.max(1, endPage - 4);
                        }
                        
                        for (let i = startPage; i <= endPage; i++) { %>
                        <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                        <% } %>
                        
                        <!-- Next Page -->
                        <% if (pagination.currentPage < pagination.totalPages) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= pagination.currentPage + 1 %>" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <% } else { %>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
            <% } %>
        </div>
    </div>

    <%- include('./partials/scripts') %>
    
    <script>
        // Initialize charts only after DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Attendance Overview Chart
            const attendanceCtx = document.getElementById('attendanceOverviewChart').getContext('2d');
            const attendanceChart = new Chart(attendanceCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Present', 'Late', 'Absent'],
                    datasets: [{
                        data: [
                            <%= attendanceByStatus.present %>,
                            <%= attendanceByStatus.late %>,
                            <%= attendanceByStatus.absent %>
                        ],
                        backgroundColor: [
                            'rgba(46, 204, 113, 0.8)',
                            'rgba(241, 196, 15, 0.8)',
                            'rgba(231, 76, 60, 0.8)'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.formattedValue;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((context.raw / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '60%'
                }
            });
            
            // Weekly Attendance Trends Chart
            const weeklyTrendsCtx = document.getElementById('weeklyTrendsChart').getContext('2d');
            const weeklyTrendsChart = new Chart(weeklyTrendsCtx, {
                type: 'line',
                data: {
                    labels: <%= JSON.stringify(weeklyData.labels) %>,
                    datasets: [{
                        label: 'Present',
                        data: <%= JSON.stringify(weeklyData.percentages.present) %>,
                        borderColor: 'rgb(46, 204, 113)',
                        backgroundColor: 'rgba(46, 204, 113, 0.1)',
                        tension: 0.3,
                        fill: true
                    }, {
                        label: 'Late',
                        data: <%= JSON.stringify(weeklyData.percentages.late) %>,
                        borderColor: 'rgb(241, 196, 15)',
                        backgroundColor: 'rgba(241, 196, 15, 0.1)',
                        tension: 0.3,
                        fill: true
                    }, {
                        label: 'Absent',
                        data: <%= JSON.stringify(weeklyData.percentages.absent) %>,
                        borderColor: 'rgb(231, 76, 60)',
                        backgroundColor: 'rgba(231, 76, 60, 0.1)',
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Percentage (%)'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.raw.toFixed(1)}%`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Render calendar with real data
            renderCalendar();
        });
        
        // Calendar functionality with real data
        function renderCalendar() {
            const calendarDays = document.getElementById('calendar-days');
            calendarDays.innerHTML = '';
            
            // Get calendar data from server
            const calendarData = <%- JSON.stringify(Object.values(calendarData)) %>;
            
            // Get first day of the month
            const firstDay = calendarData.length > 0 ? new Date(calendarData[0].date).getDay() : 0;
            
            // Create blank spaces for days before the first day of the month
            for (let i = 0; i < firstDay; i++) {
                const blankDay = document.createElement('div');
                blankDay.className = 'calendar-day';
                calendarDays.appendChild(blankDay);
            }
            
            // Create calendar days with real data
            calendarData.forEach(dayData => {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                
                // Add class based on attendance data
                if (dayData.total > 0) {
                    const presentRate = (dayData.present / dayData.total) * 100;
                    if (presentRate >= 80) {
                        dayElement.classList.add('present');
                    } else if (presentRate >= 50) {
                        dayElement.classList.add('partial');
                    } else {
                        dayElement.classList.add('absent');
                    }
                }
                
                // Create day content
                const dayNumber = document.createElement('div');
                dayNumber.className = 'day-number';
                dayNumber.textContent = dayData.displayDate;
                
                const dayStats = document.createElement('div');
                dayStats.className = 'day-stats';
                
                if (dayData.total > 0) {
                    const presentRate = Math.round((dayData.present / dayData.total) * 100);
                    const absentRate = Math.round((dayData.absent / dayData.total) * 100);
                    dayStats.textContent = `P: ${presentRate}% A: ${absentRate}%`;
                }
                
                dayElement.appendChild(dayNumber);
                dayElement.appendChild(dayStats);
                calendarDays.appendChild(dayElement);
                
                // Add click event for adding attendance
                dayElement.addEventListener('click', () => {
                    const selectedDate = new Date(dayData.date);
                    const formattedDate = selectedDate.toISOString().split('T')[0];
                    document.getElementById('date').value = formattedDate;
                    document.getElementById('attendance-form').style.display = 'block';
                });
            });
        }
        
        // Previous month button
        document.getElementById('prev-month').addEventListener('click', () => {
            // For a real implementation, this would fetch data for the previous month
            alert('Loading previous month requires fetching new data from server');
        });
        
        // Next month button
        document.getElementById('next-month').addEventListener('click', () => {
            // For a real implementation, this would fetch data for the next month
            alert('Loading next month requires fetching new data from server');
        });
        
        // Form toggle
        document.getElementById('add-attendance-btn').addEventListener('click', function() {
            document.getElementById('attendance-form').style.display = 'block';
        });
        
        document.getElementById('close-form-btn').addEventListener('click', function() {
            document.getElementById('attendance-form').style.display = 'none';
        });
        
        document.getElementById('cancel-btn').addEventListener('click', function() {
            document.getElementById('attendance-form').style.display = 'none';
        });
        
        // Initialize date picker
        flatpickr("#date", {
            dateFormat: "Y-m-d",
            maxDate: "today"
        });
        
        // Load students for dropdown - with better error handling
        fetch('/admin/students')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                const studentSelect = document.getElementById('student');
                
                if (data.students) {
                    data.students.forEach(student => {
                        const option = document.createElement('option');
                        option.value = student._id;
                        option.textContent = `${student.firstName} ${student.lastName}`;
                        studentSelect.appendChild(option);
                    });
                } else if (data.data) {
                    // Alternative data structure
                    data.data.forEach(student => {
                        const option = document.createElement('option');
                        option.value = student._id;
                        option.textContent = `${student.firstName} ${student.lastName}`;
                        studentSelect.appendChild(option);
                    });
                } else {
                    console.warn('No student data found');
                }
            })
            .catch(error => {
                console.error('Error loading students:', error);
                // Display a user-friendly error message
                const studentSelect = document.getElementById('student');
                const errorOption = document.createElement('option');
                errorOption.textContent = 'Error loading students';
                studentSelect.appendChild(errorOption);
                studentSelect.setAttribute('disabled', 'disabled');
            });
        
        // Form submission with better error handling
        document.getElementById('add-attendance-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                student: document.getElementById('student').value,
                date: document.getElementById('date').value,
                status: document.getElementById('status').value
            };
            
            // Validate required fields
            if (!formData.student || !formData.date || !formData.status) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill in all required fields'
                });
                return;
            }
            
            // Show loading indicator
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            
            fetch('/admin/attendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Server returned an error');
                }
                return response.json();
            })
            .then(data => {
                if (data.message === 'Attendance record created successfully') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Attendance has been recorded successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'An error occurred while recording attendance'
                    });
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while recording attendance'
                });
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            });
        });
        
        // Search functionality with debouncing
        const searchAttendance = document.getElementById('search-attendance');
        let searchTimeout;
        
        searchAttendance.addEventListener('keyup', function() {
            clearTimeout(searchTimeout);
            
            searchTimeout = setTimeout(() => {
                const searchTerm = this.value.toLowerCase();
                const rows = document.querySelectorAll('tbody tr');
                
                rows.forEach(row => {
                    const student = row.cells[0].textContent.toLowerCase();
                    const date = row.cells[2].textContent.toLowerCase();
                    
                    if (student.includes(searchTerm) || date.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }, 300); // Wait 300ms after user stops typing
        });
        
        // Delete attendance with better error handling
        document.querySelectorAll('.delete-attendance').forEach(button => {
            button.addEventListener('click', function() {
                const attendanceId = this.getAttribute('data-id');
                
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading indicator
                        const deleteBtn = this;
                        deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                        deleteBtn.style.pointerEvents = 'none';
                        
                        fetch(`/admin/attendance/${attendanceId}`, {
                            method: 'DELETE'
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Server returned an error');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.message === 'Attendance record deleted successfully') {
                                Swal.fire(
                                    'Deleted!',
                                    'The attendance record has been deleted.',
                                    'success'
                                ).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                                deleteBtn.style.pointerEvents = 'auto';
                                
                                Swal.fire(
                                    'Error!',
                                    data.message || 'An error occurred while deleting the attendance record',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                            deleteBtn.style.pointerEvents = 'auto';
                            
                            Swal.fire(
                                'Error!',
                                'An error occurred while deleting the attendance record',
                                'error'
                            );
                        });
                    }
                });
            });
        });
    </script>
</body>
</html> 